<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Portfolios on Andrew&#39;s Data Science Blog</title>
    <link>https://andrewinnesblog.netlify.com/portfolio/</link>
    <description>Recent content in Portfolios on Andrew&#39;s Data Science Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Oct 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://andrewinnesblog.netlify.com/portfolio/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Korean Conflict</title>
      <link>https://andrewinnesblog.netlify.com/portfolio/korean-conflict/</link>
      <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://andrewinnesblog.netlify.com/portfolio/korean-conflict/</guid>
      <description>Looking at a data set from Kaggle that shows data on the Korean conflict.
First we need to import libraries:
library(dplyr)## ## Attaching package: &amp;#39;dplyr&amp;#39;## The following objects are masked from &amp;#39;package:stats&amp;#39;:## ## filter, lag## The following objects are masked from &amp;#39;package:base&amp;#39;:## ## intersect, setdiff, setequal, unionlibrary(ggplot2)library(stringr)## Warning: package &amp;#39;stringr&amp;#39; was built under R version 3.4.2library(lubridate)## Warning: package &amp;#39;lubridate&amp;#39; was built under R version 3.</description>
    </item>
    
    <item>
      <title>Time Series</title>
      <link>https://andrewinnesblog.netlify.com/portfolio/time-series/</link>
      <pubDate>Sun, 01 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://andrewinnesblog.netlify.com/portfolio/time-series/</guid>
      <description>Time Series showing Babe Ruth’s Homeruns over the Years. First we must install our libraries.
library(Lahman)library(dplyr)## ## Attaching package: &amp;#39;dplyr&amp;#39;## The following objects are masked from &amp;#39;package:stats&amp;#39;:## ## filter, lag## The following objects are masked from &amp;#39;package:base&amp;#39;:## ## intersect, setdiff, setequal, unionlibrary(ggplot2)library(ggiraph)Next we must create a dataframe:
df&amp;lt;-Batting%&amp;gt;%filter(playerID==&amp;quot;ruthba01&amp;quot;)%&amp;gt;%select(yearID,HR)Next we take that dataframe and visualize it:</description>
    </item>
    
    <item>
      <title>Barplot</title>
      <link>https://andrewinnesblog.netlify.com/portfolio/barplot/</link>
      <pubDate>Mon, 25 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://andrewinnesblog.netlify.com/portfolio/barplot/</guid>
      <description>How many homeruns each team hit in 1980.
library(Lahman)library(dplyr)library(ggplot2)df&amp;lt;-Teams%&amp;gt;%filter(yearID==1980)%&amp;gt;%select(name,HR)%&amp;gt;%arrange(HR)df$name&amp;lt;-factor(df$name,levels=df$name)ggplot()+geom_bar(data=df,aes(x=name,y=HR),stat=&amp;quot;identity&amp;quot;,color=&amp;quot;blue&amp;quot;,fill=&amp;quot;white&amp;quot;)+coord_flip()</description>
    </item>
    
    <item>
      <title>Histogram</title>
      <link>https://andrewinnesblog.netlify.com/portfolio/histogram/</link>
      <pubDate>Mon, 25 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://andrewinnesblog.netlify.com/portfolio/histogram/</guid>
      <description>Player’s weight distribution using a histogram.
library(Lahman)library(dplyr)library(ggplot2)df&amp;lt;-Master%&amp;gt;%filter(!is.na(weight))%&amp;gt;%select(weight)ggplot()+geom_histogram(data=df,aes(x=weight),color=&amp;quot;white&amp;quot;,fill=&amp;quot;blue&amp;quot;,bins=40)+ggtitle(&amp;quot;Baseball Player Weight Distribution&amp;quot;)</description>
    </item>
    
    <item>
      <title>ScatterPlot</title>
      <link>https://andrewinnesblog.netlify.com/portfolio/ggplot/</link>
      <pubDate>Sat, 23 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://andrewinnesblog.netlify.com/portfolio/ggplot/</guid>
      <description>library(Lahman)library(dplyr)library(ggplot2)library(ggiraph)df&amp;lt;-Batting%&amp;gt;%group_by(playerID)%&amp;gt;%summarize(career_HR=sum(HR),career_SO=sum(SO))%&amp;gt;%filter(career_HR&amp;gt;=400)HR_vs_SO&amp;lt;-inner_join(df,Master,by=c(&amp;quot;playerID&amp;quot;))%&amp;gt;%select(nameFirst,nameLast,career_HR,career_SO)HR_vs_SO$name&amp;lt;-paste(HR_vs_SO$nameFirst,HR_vs_SO$nameLast)————————————g&amp;lt;-ggplot()+geom_point_interactive(data=HR_vs_SO,aes(x=career_SO,y=career_HR,tooltip=name,data_id=nameLast))+ggtitle(&amp;quot;Career Homeruns vs. Strikeouts for Great Hitters&amp;quot;)+xlab(&amp;quot;Career Strikeouts&amp;quot;)+ylab(&amp;quot;Career Homeruns&amp;quot;)ggiraph(code=print(g),hover_css=&amp;quot;fill:white;stroke:black&amp;quot;){&#34;x&#34;:{&#34;html&#34;:&#34;\n\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 400\n \n \n 500\n \n \n 600\n \n \n 700\n \n \n \n \n \n \n \n \n \n \n 1000\n \n \n 1500\n \n \n 2000\n \n \n 2500\n \n \n Career Strikeouts\n \n \n Career Homeruns\n \n \n Career Homeruns vs.</description>
    </item>
    
  </channel>
</rss>